input {
  file {
    codec => multiline {
      pattern => "^%{TIMESTAMP_ISO8601} "
      negate => "true"
      what => "previous"
    }

    path => ["/app/bohr/logs/Pts2/cbsd.log","/app/bohr/logs/Pts2/ccfc.log", "/app/bohr/logs/Pts2/gateway.log", "/app/bohr/logs/Pts2/send.log"]
    sincedb_path => "${LOGSTASH_HOME}/appconf/.sincedb_uft8_${USER}.db"
    start_position => "end"
    close_older => 1
    stat_interval =>5
    codec => multiline {
      pattern => "^%{TIMESTAMP_ISO8601} "
      negate => true
      what => previous
    }
  }
}
filter {
    ruby{
     code => "event['readunixtime']= event.timestamp.time.getlocal.to_f.to_s"
     add_field =>{
        "app_name"=>"logi_cores_pts"
        "app_stage"=>"SIT"
        "readtimestamp"=>"%{@timestamp}"
        }
     }
}
output {
    kafka{
    bootstrap_servers=> "10.132.37.39:9092"
    topic_id=> "%{app_name}"
    acks=>"0"
    batch_size=>16384
    codec=>json
  }
}

